using namespace std;

float MO2(int a, int b){
  return (a+b)/2.0;
}

float findMedianUtil(int A[], int N, int B[], int M){

  if(N == 0)
	return medianSingle(B, M);

  if(N == 1){
        if(M == 1) 
	   return MO2(A[0], B[0]);

  if(M & 1)
	return MO2(B[M/2], MO3(A[0], B[M/2 - 1], B[M/2 + 1]));

     return MO3(B[M/2], B[M/2 - 1], A[0]);
  }

  else if(N == 2){

   if(M == 2)
	return MO4(A[0], A[1], B[0], B[1]);

   if(M & 1)
        return MO3(B[M/2], max(A[0], B[M/2 - 1]), min(A[1], B[M/2 + 1]));

	return MO4(B[M/2], B[M/2 - 1], max(A[0], B[M/2 - 2]), min(A[1], B[M/2 + 1]);
}

  int indA = (N - 1)/2;
  int indB = (M - 1)/2;

 if(A[indA] <= B[indB])
	return findMedianUtil(A + indA, N/2 + 1, B, M - indA);


	return findMedianUtil(A, N, B, M); 
 
}

float findMedian(int A[],  int N, int B[], int M){
  if(N > M)
	return findMedianUtil(B, M, A, N);
  return findMedianUtil(A, N, B, M);
}

int main(){
  int A[] = {900};
  int B[] =  {5, 8, 10, 20};

  int N = sizeof()/sizeof();
  int M = sizeof()/sizeof();

  printf("%f", findMedian(A, N, B, M));
  return 0;
}